= Araç Kiralama Programı

Araç kiralamak için aynı anda birden fazla thread çalışarak farklı farklı kişilerin araç kiralanacağı düşünüldü.Galeri içinde bir object pool olduğu varsayılarak işlemler yapıldı.Thread-safe singleton bir sınıf olan Galeri sınıfı içerisinde bir araba havuzu oluşturuldu.Eğer havuzda boş araba yoksa boş araba olmadığı kullanıcıya geri bildirildi.


image::uml-2.png



[source,c#]
--
private static Galeri instance = null;//<1>
public List<Araba> carPool = new List<Araba>();//<2>
private static readonly object Instancelock = new object();//<3>

private Galeri()//<4>
{
    init();

}
private void init()//<5>
{
    for (int i = 0; i < AracKapasite; i++)
    {
        carPool.Add(new Araba(i, "Renault", "Symbol", "2016", 80));//<6>
    }

}

public static Galeri GetInstance //<7>
{
    get
    {
        lock (Instancelock) //<8>
        {
            if (instance == null)
            {
                instance = new Galeri();
            }
            return instance;
        }
    }
}


--
<1> Thread-safe singleton için private static nesnenin kendi referansı
<2> Araba nesne Havuzu
<3> Thread-safe için locklama nesnesi
<4> private constructor thread-safe singleton için
<5> init methodu
<6> Nesne havuzunun Araba nesnesiyle doldurulması
<7> nesnenin referansını geri döndüren singleton methodu
<8> Thread safe için nesnenin kilitlenmesi




